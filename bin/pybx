#!/usr/local/anaconda3/bin/python
import ipdb
import sys, os.path
from KVAN import fuargs, topdir
topdir.setup_syspath()
import pybx, pybx_parser
import codegen_cpp, codegen_js

@fuargs.action
def verify(fn):
    mod_name = os.path.basename(fn).split(".")[0]
    pybx.pybx_path = [os.path.dirname(fn)]
    pybx.import_pybx(mod_name, False)
    if not mod_name in globals():
        print(f"can't find module {mod_name}, load failed")
    else:
        print(globals()[mod_name])

@fuargs.action
def parse(fn):
    mod_name = os.path.basename(fn).split(".")[0]
    pybx.pybx_path = [os.path.dirname(fn)]
    pybx.import_pybx(mod_name, False)
    if not mod_name in globals():
        print(f"can't find module {mod_name}, load failed")
        return
    mod = globals()[mod_name]
    mod_defs = pybx_parser.parse_module(mod)
    mod_defs.dump()
            
@fuargs.action
def gen_cpp(fn, out_fn = None):
    mod_name = os.path.basename(fn).split(".")[0]
    pybx.pybx_path = [os.path.dirname(fn)]
    pybx.import_pybx(mod_name, False)
    if not mod_name in globals():
        print(f"can't find module {mod_name}, load failed")
        return
    mod = globals()[mod_name]
    mod_defs = pybx_parser.parse_module(mod)

    out_fd = open(out_fn, "w") if isinstance(out_fn, str) else sys.stdout
    codegen_cpp.generate_cpp_file(mod_defs, out_fd, fn)
    return 0

@fuargs.action
def gen_js(fn, out_fn = None):
    mod_name = os.path.basename(fn).split(".")[0]
    pybx.pybx_path = [os.path.dirname(fn)]
    pybx.import_pybx(mod_name, False)
    if not mod_name in globals():
        print(f"can't find module {mod_name}, load failed")
        return
    mod = globals()[mod_name]
    mod_defs = pybx_parser.parse_module(mod)

    out_fd = open(out_fn, "w") if isinstance(out_fn, str) else sys.stdout
    codegen_js.generate_js_file(mod_defs, out_fd, fn)
    return 0

if __name__ == "__main__":
    fuargs.exec_actions(sys.argv[1:])
    
