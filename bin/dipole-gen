#!/usr/local/anaconda3/bin/python

import sys, os.path
from KVAN import fuargs, topdir
topdir.setup_syspath()
import ast
import codegen, codegen_cpp

@fuargs.action
def ast_dump(fn):
    source_code = "\n".join(open(fn).readlines())
    pt = ast.parse(source_code)
    print(ast.dump(pt))

@fuargs.action
def verify(fn):
    import types
    import importlib.machinery
    loader = importlib.machinery.SourceFileLoader('a_b', fn)
    mod = types.ModuleType(loader.name)
    loader.exec_module(mod)
    print(mod)

@fuargs.action
def verify2(fn):
    import importlib.util
    module_name = os.path.basename(fn)
    file_path = fn
    mod_path = os.path.expanduser(os.path.dirname(fn))
    print(module_name, file_path, mod_path)
    sys.path.append(mod_path)
    #print(sys.path)
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    print(module)
    
@fuargs.action
def gen_cpp(fn, out_fn = None):
    out_fd = open(out_fn, "w") if isinstance(out_fn, str) else sys.stdout

    module_defs = codegen.parse_module(fn)
    module_defs.dump()
    
    nested_modules = module_defs.imports
    processed_modules = set()
    mod_search_pathes = [os.path.dirname(fn)]
    while True:
        if len(nested_modules) == 0:
            break
        import_name = nested_modules[0]; nested_modules = nested_modules[1:]
        if import_name in processed_modules:
            continue
        print("processing import", import_name)
        import_fn = codegen.find_import_file(import_name, mod_search_pathes)
        if import_fn == None:
            raise Exception(f"can't find file for import module {import_name}")
        new_module_defs = codegen.parse_module(import_fn)
        new_module_defs.dump()
        module_defs.merge(new_module_defs)
        nested_modules.extend(new_module_defs.imports)
        processed_modules.add(import_name)
        
    codegen_cpp.generate_cpp_file(fn, module_defs, out_fd)
    return 0

if __name__ == "__main__":
    fuargs.exec_actions(sys.argv[1:])
    
