#!/usr/local/anaconda3/bin/python

import sys, os.path
from KVAN import fuargs, topdir
topdir.setup_syspath()
import ast
import codegen, codegen_cpp, codegen_js

@fuargs.action
def ast_dump(fn):
    source_code = "\n".join(open(fn).readlines())
    pt = ast.parse(source_code)
    print(ast.dump(pt))

@fuargs.action
def verify(fn):
    import types
    import importlib.machinery
    loader = importlib.machinery.SourceFileLoader('a_b', fn)
    mod = types.ModuleType(loader.name)
    loader.exec_module(mod)
    print(mod)

@fuargs.action
def verify2(fn):
    import importlib.util
    module_name = os.path.basename(fn)
    file_path = fn
    mod_path = os.path.expanduser(os.path.dirname(fn))
    print(module_name, file_path, mod_path)
    sys.path.append(mod_path)
    #print(sys.path)
    spec = importlib.util.spec_from_file_location(module_name, file_path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)
    print(module)

@fuargs.action
def verify3(fn):
    mod = os.path.basename(fn).split(".")[0]
    mod_path = os.path.expanduser(os.path.dirname(fn))
    sys.path.append(mod_path)
    print(mod_path, mod)
    res = exec(f"import {mod}")
    print(res)

@fuargs.action
def parse(fn):
    out_fd = sys.stdout
    module_defs = codegen.parse_all_modules(fn)
    module_defs.dump()
    
@fuargs.action
def gen_cpp(fn, out_fn = None):
    out_fd = open(out_fn, "w") if isinstance(out_fn, str) else sys.stdout

    module_defs = codegen.parse_all_modules(fn)
    module_defs.dump()
        
    codegen_cpp.generate_cpp_file(fn, module_defs, out_fd)
    return 0

@fuargs.action
def gen_js(fn, out_fn = None):
    out_fd = open(out_fn, "w") if isinstance(out_fn, str) else sys.stdout

    module_defs = codegen.parse_all_modules(fn)
    module_defs.dump()

    codegen_js.generate_js_file(fn, module_defs, out_fd)
    return 0
    
if __name__ == "__main__":
    fuargs.exec_actions(sys.argv[1:])
    
